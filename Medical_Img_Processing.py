# -*- coding: utf-8 -*-
"""TP_Géometri.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KH-8SbxNNuD8Pv492NAashQCwyXc30Ze
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

img = cv2.imread("/content/sample_data/data/IM_brain_top.jpg",cv2.IMREAD_GRAYSCALE) # blue BRG
img_Origin = img
plt.imshow(img)

tp = type(img) # numpy.ndarray
shp = img.shape #  (542, 411) pour une lecture en niveaux de gris
print( str(tp) + " " + str(shp) + " " + " " +str(img[100,100]) )  # 33 # pour une image en niveau de gris

# Analyse des donnees (pixels)
print("min = ",np.min(img))
print("max = ",np.max(img))
print("mean = ",np.mean(img))
print("values = ",np.unique(img))

# proprietes
print( img.size )  # 222762  # pour une image en niveau de gris
print( img.dtype ) # uint8

"""# Trouvez la relation entre  img.dtype  et img.shape 
Pour chaque valeur se image.sahpe de coordonnée (x,y) est représenté par une valeur **int** entre 0 et 255, cette valeur représente l'intensité du gris dans un pixel quelconque.
"""

cellsize = 0.04
image_size_x = img.shape[0] * cellsize
image_size_y = img.shape[1] * cellsize
print("image size: \n x:" + str(image_size_x) +" cm"+ "\n y:" + str(image_size_y)+" cm")

img2 = img
img3 = img
img4 = img

for i in range(img2.shape[0]):
  for j in range(img2.shape[1]):
    if(img2[i][j] > 70):
      img2[i][j] = 1
    else:
      img2[i][j] = 0
plt.imshow(img2)

"""On peut clairement voir la délimitation dur crane a travers l'image binaire, est au niveau du cérveau on ne perd pas de détatilles, donc le seuil a **70** est acceptable. """

#fonction équivalante en CV2
ret,thresh1 = cv2.threshold(img3,0,70,cv2.THRESH_BINARY)

plt.imshow(thresh1)

"""#Surface du cerveau"""

sum = 0
for i in range(img2.shape[0]):
  for j in range(img2.shape[1]):
    if(img2[i][j] == 1):
      sum = sum + 1 

surface_cell = cellsize * cellsize
surface = sum * surface_cell

print("Surface = " + str(surface) + " cm")

"""#Erosion Dilatation"""

kernel = np.ones((5,5),np.uint8)
erosion = cv2.erode(img2,kernel,iterations = 1)
dilation = cv2.dilate(erosion,kernel,iterations = 1)
erosion = cv2.erode(img2,kernel,iterations = 1)
dilation = cv2.dilate(erosion,kernel,iterations = 1)

plt.imshow(dilation)

"""Avec cette configuration de kernel size (7,7) on a réussi a séparer le cerveau du crane"""

ret, markers = cv2.connectedComponents(dilation) 
print("Nombre de composante connexe dans l\'image= ",ret)

for i in range(markers.shape[0]):
  for j in range(markers.shape[1]):
    if(markers[i][j] == 1):
      markers[i][j] = 1
    else:
      markers[i][j] = 0
plt.imshow(markers)

img_origin_2 = cv2.imread("/content/sample_data/data/IM_brain_top.jpg",cv2.IMREAD_GRAYSCALE)

for i in range(markers.shape[0]):
  for j in range(markers.shape[1]):
    if(markers[i][j] == 1):
      img_origin_2[i][j] = 0
plt.imshow(img_origin_2)

type(markers)

